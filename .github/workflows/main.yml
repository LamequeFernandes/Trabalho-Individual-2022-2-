name: CI/CD

on:
  push:
    branches:
      - master
      - develop

env:
  ACTIONS_ALLOW_UNSECURE_COMMANDS: "true"

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - name: Cópiando dados da master
      uses: actions/checkout@v2

    - name: Configurando python
      uses: actions/setup-python@v2
      with:
        python-version: 3.8

    - name: Recuperando ultima versão da lib
      run: |
        VERSION=$(pip show trabalho-individual-2022-2-lameque | grep Version | awk '{print $2}')
        echo ::set-env name=VERSION::$VERSION
        export VERSION=${{ env.VERSION }}

    - name: Atualizando versão
      run: |
        VERSION=${{ env.VERSION }}
        NEW_VERSION=$(echo $VERSION | awk -F. -v OFS=. 'NF==1{print ++$NF}; NF>1{if(length($NF+1)>length($NF))$(NF-1)++; $NF=sprintf("%0*d", length($NF), ($NF+1)%(10^length($NF))); print}')
        echo ::set-env name=NEW_VERSION::$NEW_VERSION
        sed -i "s/$VERSION/$NEW_VERSION/g" pyproject.toml

    - name: Instalando Poetry
      run: python -m pip install poetry

    - name: Instalando dependencias
      run: |
        poetry install

    - name: Verificando lint
      run: |
        pip install pylint
        pylint src
      continue-on-error: true

    - name: Realizando testes
      run: poetry run pytest --cov 

    - name: Incrementando versão na lib
      run: poetry version patch

    - name: Build package
      run: poetry build -v

    - name: Publicação no PyPI
      run: |
        poetry config pypi-token.pypi ${{ secrets.PYPI_TOKEN }}
        poetry publish --username __token__ -v
